service: em-course-service
frameworkVersion: '3.40.0'
provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  timeout: 30
  environment:
    ENV_DATA: ${env:ENV_DATA, ssm:/aws/reference/secretsmanager/prod/envs}
  iam:
    role:
      statements:
        - Effect: Allow
          Resource: "*"
          Action: 
            - secretsmanager:GetSecretValue

plugins:
  - serverless-esbuild
  - serverless-offline

custom:
  esbuild:
    bundle: true
    minify: true
    sourcemap: false
    exclude: ['aws-sdk']
    target: 'node18'
    define:
      'require.resolve': undefined
    platform: 'node'

functions:
  # Custom Authorizer
  customAuthorizer:
    handler: dist/auth/authorizer.handler

  # Course Management
  createCourse:
    handler: dist/api/courses.createCourse
    events:
      - http:
          path: /courses
          method: post
          cors: true
          authorizer: customAuthorizer

  getCourse:
    handler: dist/api/courses.getCourse
    events:
      - http:
          path: /courses/{id}
          method: get
          cors: true
          authorizer: customAuthorizer

  updateCourse:
    handler: dist/api/courses.updateCourse
    events:
      - http:
          path: /courses/{id}
          method: put
          cors: true
          authorizer: customAuthorizer

  deleteCourse:
    handler: dist/api/courses.deleteCourse
    events:
      - http:
          path: /courses/{id}
          method: delete
          cors: true
          authorizer: customAuthorizer

  listCourses:
    handler: dist/api/courses.listCourses
    events:
      - http:
          path: /courses
          method: get
          cors: true
          authorizer: customAuthorizer

  publishCourse:
    handler: dist/api/courses.publishCourse
    events:
      - http:
          path: /courses/{id}/publish
          method: post
          cors: true
          authorizer: customAuthorizer

  archiveCourse:
    handler: dist/api/courses.archiveCourse
    events:
      - http:
          path: /courses/{id}/archive
          method: post
          cors: true
          authorizer: customAuthorizer

  updateCourseStatus:
    handler: dist/api/courses.updateCourseStatus
    events:
      - http:
          path: /courses/{id}/status
          method: patch
          cors: true
          authorizer: customAuthorizer

  getCourseStatistics:
    handler: dist/api/courses.getCourseStatistics
    events:
      - http:
          path: /courses/statistics
          method: get
          cors: true
          authorizer: customAuthorizer

  # Batch Management
  createBatch:
    handler: dist/api/batches.createBatch
    events:
      - http:
          path: /batches
          method: post
          cors: true
          authorizer: customAuthorizer

  getBatch:
    handler: dist/api/batches.getBatch
    events:
      - http:
          path: /batches/{id}
          method: get
          cors: true
          authorizer: customAuthorizer

  updateBatch:
    handler: dist/api/batches.updateBatch
    events:
      - http:
          path: /batches/{id}
          method: put
          cors: true
          authorizer: customAuthorizer

  deleteBatch:
    handler: dist/api/batches.deleteBatch
    events:
      - http:
          path: /batches/{id}
          method: delete
          cors: true
          authorizer: customAuthorizer

  listBatches:
    handler: dist/api/batches.listBatches
    events:
      - http:
          path: /batches
          method: get
          cors: true
          authorizer: customAuthorizer

  getBatchStudents:
    handler: dist/api/batches.getBatchStudents
    events:
      - http:
          path: /batches/{id}/students
          method: get
          cors: true
          authorizer: customAuthorizer

  addStudentToBatch:
    handler: dist/api/batches.addStudentToBatch
    events:
      - http:
          path: /batches/{id}/students
          method: post
          cors: true
          authorizer: customAuthorizer

  removeStudentFromBatch:
    handler: dist/api/batches.removeStudentFromBatch
    events:
      - http:
          path: /batches/{id}/students/{studentId}
          method: delete
          cors: true
          authorizer: customAuthorizer

  # Assignment Management
  createAssignment:
    handler: dist/api/assignments.createAssignment
    events:
      - http:
          path: /assignments
          method: post
          cors: true
          authorizer: customAuthorizer

  getAssignment:
    handler: dist/api/assignments.getAssignment
    events:
      - http:
          path: /assignments/{id}
          method: get
          cors: true
          authorizer: customAuthorizer

  updateAssignment:
    handler: dist/api/assignments.updateAssignment
    events:
      - http:
          path: /assignments/{id}
          method: put
          cors: true
          authorizer: customAuthorizer

  deleteAssignment:
    handler: dist/api/assignments.deleteAssignment
    events:
      - http:
          path: /assignments/{id}
          method: delete
          cors: true
          authorizer: customAuthorizer

  listAssignments:
    handler: dist/api/assignments.listAssignments
    events:
      - http:
          path: /assignments
          method: get
          cors: true
          authorizer: customAuthorizer

  publishAssignment:
    handler: dist/api/assignments.publishAssignment
    events:
      - http:
          path: /assignments/{id}/publish
          method: post
          cors: true
          authorizer: customAuthorizer

  getAssignmentsByDueDate:
    handler: dist/api/assignments.getAssignmentsByDueDate
    events:
      - http:
          path: /assignments/due-date
          method: get
          cors: true
          authorizer: customAuthorizer

  # Enrollment Management
  enrollStudent:
    handler: dist/api/enrollments.enrollStudent
    events:
      - http:
          path: /enrollments
          method: post
          cors: true
          authorizer: customAuthorizer

  getEnrollment:
    handler: dist/api/enrollments.getEnrollment
    events:
      - http:
          path: /enrollments/{id}
          method: get
          cors: true
          authorizer: customAuthorizer

  updateEnrollmentStatus:
    handler: dist/api/enrollments.updateEnrollmentStatus
    events:
      - http:
          path: /enrollments/{id}/status
          method: put
          cors: true
          authorizer: customAuthorizer

  listEnrollments:
    handler: dist/api/enrollments.listEnrollments
    events:
      - http:
          path: /enrollments
          method: get
          cors: true
          authorizer: customAuthorizer

  updateStudentProgress:
    handler: dist/api/enrollments.updateStudentProgress
    events:
      - http:
          path: /enrollments/{id}/progress
          method: put
          cors: true
          authorizer: customAuthorizer

  issueCertificate:
    handler: dist/api/enrollments.issueCertificate
    events:
      - http:
          path: /enrollments/{id}/certificate
          method: post
          cors: true
          authorizer: customAuthorizer

  getStudentProgress:
    handler: dist/api/enrollments.getStudentProgress
    events:
      - http:
          path: /enrollments/progress
          method: get
          cors: true
          authorizer: customAuthorizer

  dropEnrollment:
    handler: dist/api/enrollments.dropEnrollment
    events:
      - http:
          path: /enrollments/{id}/drop
          method: post
          cors: true
          authorizer: customAuthorizer
